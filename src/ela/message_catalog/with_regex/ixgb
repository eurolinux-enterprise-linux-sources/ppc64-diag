subsystem: net

file: "drivers/net/ixgb/ixgb_main.c"

message[chatter]: netif_info "Intel(R) PRO/10GbE Network Connection\n"
regex netdev_info3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): Intel\\(R\\) PRO/10GbE Network Connection$"
regex netdev_info1 "^([[:print:]]*): Intel\\(R\\) PRO/10GbE Network Connection$"
regex netdev_info0 "^\\(NULL net_device\\): Intel\\(R\\) PRO/10GbE Network Connection$"
message[defensive]: netif_err "Unable to allocate interrupt Error: %d\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): Unable to allocate interrupt Error: ([-]\?[0-9]{1,})$"
regex netdev_err1 "^([[:print:]]*): Unable to allocate interrupt Error: ([-]\?[0-9]{1,})$"
regex netdev_err0 "^\\(NULL net_device\\): Unable to allocate interrupt Error: [-]\?[0-9]{1,}$"
message[defensive]: netif_err "ixgb_init_hw failed\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): ixgb_init_hw failed$"
regex netdev_err1 "^([[:print:]]*): ixgb_init_hw failed$"
regex netdev_err0 "^\\(NULL net_device\\): ixgb_init_hw failed$"
message[defensive]: netif_err "The EEPROM Checksum Is Not Valid\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): The EEPROM Checksum Is Not Valid$"
regex netdev_err1 "^([[:print:]]*): The EEPROM Checksum Is Not Valid$"
regex netdev_err0 "^\\(NULL net_device\\): The EEPROM Checksum Is Not Valid$"
message[defensive]: netif_err "Invalid MAC Address\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): Invalid MAC Address$"
regex netdev_err1 "^([[:print:]]*): Invalid MAC Address$"
regex netdev_err0 "^\\(NULL net_device\\): Invalid MAC Address$"
message[defensive]: netif_err "unsupported device id\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): unsupported device id$"
regex netdev_err1 "^([[:print:]]*): unsupported device id$"
regex netdev_err0 "^\\(NULL net_device\\): unsupported device id$"
message[defensive]: netif_err "Unable to allocate transmit descriptor ring memory\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): Unable to allocate transmit descriptor ring memory$"
regex netdev_err1 "^([[:print:]]*): Unable to allocate transmit descriptor ring memory$"
regex netdev_err0 "^\\(NULL net_device\\): Unable to allocate transmit descriptor ring memory$"
message[defensive]: netif_err "Unable to allocate transmit descriptor memory\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): Unable to allocate transmit descriptor memory$"
regex netdev_err1 "^([[:print:]]*): Unable to allocate transmit descriptor memory$"
regex netdev_err0 "^\\(NULL net_device\\): Unable to allocate transmit descriptor memory$"
message[defensive]: netif_err "Unable to allocate receive descriptor ring\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): Unable to allocate receive descriptor ring$"
regex netdev_err1 "^([[:print:]]*): Unable to allocate receive descriptor ring$"
regex netdev_err0 "^\\(NULL net_device\\): Unable to allocate receive descriptor ring$"
message[defensive]: netif_err "Unable to allocate receive descriptors\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): Unable to allocate receive descriptors$"
regex netdev_err1 "^([[:print:]]*): Unable to allocate receive descriptors$"
regex netdev_err0 "^\\(NULL net_device\\): Unable to allocate receive descriptors$"
message[defensive]: netif_err "Invalid MTU setting %d\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): Invalid MTU setting ([-]\?[0-9]{1,})$"
regex netdev_err1 "^([[:print:]]*): Invalid MTU setting ([-]\?[0-9]{1,})$"
regex netdev_err0 "^\\(NULL net_device\\): Invalid MTU setting [-]\?[0-9]{1,}$"
message[defensive]: netif_err "Cannot re-enable PCI device after reset\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): Cannot re-enable PCI device after reset$"
regex netdev_err1 "^([[:print:]]*): Cannot re-enable PCI device after reset$"
regex netdev_err0 "^\\(NULL net_device\\): Cannot re-enable PCI device after reset$"
message[defensive]: netif_err "After reset, the EEPROM checksum is not valid\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): After reset, the EEPROM checksum is not valid$"
regex netdev_err1 "^([[:print:]]*): After reset, the EEPROM checksum is not valid$"
regex netdev_err0 "^\\(NULL net_device\\): After reset, the EEPROM checksum is not valid$"
message[defensive]: netif_err "After reset, invalid MAC address\n"
regex netdev_err3 "^([[:print:]]*) ([[:print:]]*): ([[:print:]]*): After reset, invalid MAC address$"
regex netdev_err1 "^([[:print:]]*): After reset, invalid MAC address$"
regex netdev_err0 "^\\(NULL net_device\\): After reset, invalid MAC address$"
message[defensive]: dev_err "TX DMA map failed\n"
regex dev_err "^([[:print:]]*) ([[:print:]]*): TX DMA map failed$"
message[defensive]: printk err "ixgb: No usable DMA configuration, aborting\n"
regex printk "^ixgb: No usable DMA configuration, aborting$"
message[chatter]: printk err "ixgb: %s NIC Link is Up 10 Gbps Full Duplex, Flow Control: %s\n"
regex printk "^ixgb: [[:print:]]* NIC Link is Up 10 Gbps Full Duplex, Flow Control: [[:print:]]*$"
message[chatter]: printk err "ixgb: %s NIC Link is Down\n"
regex printk "^ixgb: [[:print:]]* NIC Link is Down$"

file: "drivers/net/ixgb/ixgb_param.c"

message[chatter]: printk err "Invalid %s specified (%i) %s\n"
regex printk "^Invalid [[:print:]]* specified \\([-]\?[0-9]{1,}\\) [[:print:]]*$"
message[chatter]: printk err "Warning: no configuration for board #%i\n"
regex printk "^Warning: no configuration for board #[-]\?[0-9]{1,}$"
message[chatter]: printk info  "Using defaults for all values\n"
regex printk "^Using defaults for all values$"
message[chatter]: printk info  "Ignoring RxFCHighThresh when no RxFC\n"
regex printk "^Ignoring RxFCHighThresh when no RxFC$"
message[chatter]: printk info  "Ignoring RxFCLowThresh when no RxFC\n"
regex printk "^Ignoring RxFCLowThresh when no RxFC$"
message[chatter]: printk info  "Ignoring FCReqTimeout when no RxFC\n"
regex printk "^Ignoring FCReqTimeout when no RxFC$"

file: "drivers/net/ixgbe/ixgbe_main.c"

message[chatter]: dev_info "MAC: %d, PHY: %d, SFP+: %d, PBA No: %06x-%03x\n"
regex dev_info "^([[:print:]]*) ([[:print:]]*): MAC: ([-]\?[0-9]{1,}), PHY: ([-]\?[0-9]{1,}), SFP\\+: ([-]\?[0-9]{1,}), PBA No: ([0]{0,5}[0-9a-f]{1,})-([0]{0,2}[0-9a-f]{1,})$"
message[chatter]: dev_info "MAC: %d, PHY: %d, PBA No: %06x-%03x\n"
regex dev_info "^([[:print:]]*) ([[:print:]]*): MAC: ([-]\?[0-9]{1,}), PHY: ([-]\?[0-9]{1,}), PBA No: ([0]{0,5}[0-9a-f]{1,})-([0]{0,2}[0-9a-f]{1,})$"
message[chatter]: dev_info "Intel(R) 10 Gigabit Network Connection\n"
regex dev_info "^([[:print:]]*) ([[:print:]]*): Intel\\(R\\) 10 Gigabit Network Connection$"
message[chatter]: dev_warn "PCI-Express bandwidth available for this card is not sufficient for optimal performance.\n"
regex dev_warn "^([[:print:]]*) ([[:print:]]*): PCI-Express bandwidth available for this card is not sufficient for optimal performance\\.$"
message[chatter]: dev_warn "For optimal performance a x8 PCI-Express slot is required.\n"
regex dev_warn "^([[:print:]]*) ([[:print:]]*): For optimal performance a x8 PCI-Express slot is required\\.$"
message[defensive]: dev_err "master disable timed out\n"
regex dev_err "^([[:print:]]*) ([[:print:]]*): master disable timed out$"
message[defensive]: dev_err "Hardware Error: %d\n"
regex dev_err "^([[:print:]]*) ([[:print:]]*): Hardware Error: ([-]\?[0-9]{1,})$"
message[defensive]: dev_err "EEPROM initialization failed\n"
regex dev_err "^([[:print:]]*) ([[:print:]]*): EEPROM initialization failed$"
message[defensive]: dev_err "TX DMA map failed\n"
regex dev_err "^([[:print:]]*) ([[:print:]]*): TX DMA map failed$"
message[defensive]: dev_err "No usable DMA configuration, aborting\n"
regex dev_err "^([[:print:]]*) ([[:print:]]*): No usable DMA configuration, aborting$"
message[defensive]: dev_err "pci_request_selected_regions failed 0x%x\n"
regex dev_err "^([[:print:]]*) ([[:print:]]*): pci_request_selected_regions failed 0x([0-9a-f]{1,})$"
message[defensive]: dev_err "HW Init failed: %d\n"
regex dev_err "^([[:print:]]*) ([[:print:]]*): HW Init failed: ([-]\?[0-9]{1,})$"
message[defensive]: dev_err "The EEPROM Checksum Is Not Valid\n"
regex dev_err "^([[:print:]]*) ([[:print:]]*): The EEPROM Checksum Is Not Valid$"
message[defensive]: dev_err "invalid MAC address\n"
regex dev_err "^([[:print:]]*) ([[:print:]]*): invalid MAC address$"
message[defensive]: dev_err "pci_cleanup_aer_uncorrect_error_status failed 0x%0x\n"
regex dev_err "^([[:print:]]*) ([[:print:]]*): pci_cleanup_aer_uncorrect_error_status failed 0x([0-9a-f]{1,})$"
message[defensive]: printk err  "ixgbe: Cannot enable PCI device from suspend\n"
regex printk "^ixgbe: Cannot enable PCI device from suspend$"
message[defensive]: printk err  "ixgbe: Cannot initialize interrupts for device\n"
regex printk "^ixgbe: Cannot initialize interrupts for device$"
message[chatter]: printk err  "ixgbe: %s NIC Link is Up %s, Flow Control: %s\n"
regex printk "^ixgbe: [[:print:]]* NIC Link is Up [[:print:]]*, Flow Control: [[:print:]]*$"
message[chatter]: printk err "ixgbe: %s NIC Link is Down\n"
regex printk "^ixgbe: [[:print:]]* NIC Link is Down$"

file: "drivers/net/ixgbe/ixgbe_sriov.c"

message[defensive]: printk err "Error receiving message from VF\n"
regex printk "^Error receiving message from VF$"

file: "drivers/net/ixgbe/ixgbe_82598.c"

message[defensive]: hw_dbg "Flow control param set incorrectly\n"
regex hw_dbg "^([[:print:]]*): Flow control param set incorrectly$"
message[defensive]: hw_dbg "Autonegotiation did not complete.\n"
regex hw_dbg "^([[:print:]]*): Autonegotiation did not complete\\.$"
message[defensive]: hw_dbg "Link was indicated but link is down\n"
regex hw_dbg "^([[:print:]]*): Link was indicated but link is down$"
message[defensive]: hw_dbg "PCI-E Master disable polling has failed.\n"
regex hw_dbg "^([[:print:]]*): PCI-E Master disable polling has failed\\.$"
message[defensive]: hw_dbg "Reset polling failed to complete.\n"
regex hw_dbg "^([[:print:]]*): Reset polling failed to complete\\.$"
message[defensive]: hw_dbg "RAR index %d is out of range.\n"
regex hw_dbg "^([[:print:]]*): RAR index ([-]\?[0-9]{1,}) is out of range\\.$"
message[defensive]: hw_dbg "EEPROM read did not pass.\n"
regex hw_dbg "^([[:print:]]*): EEPROM read did not pass\\.$"

file: "drivers/net/ixgbe/ixgbe_82599.c"

message[defensive]: hw_dbg "Autoneg did not complete.\n"
regex hw_dbg "^([[:print:]]*): Autoneg did not complete\\.$"
message[defensive]: hw_dbg "ixgbe_setup_mac_link_smartspeed.\n"
regex hw_dbg "^([[:print:]]*): ixgbe_setup_mac_link_smartspeed\\.$"
message[defensive]: hw_dbg "PCI-E Master disable polling has failed.\n"
regex hw_dbg "^([[:print:]]*): PCI-E Master disable polling has failed\\.$"
message[defensive]: hw_dbg "Reset polling failed to complete.\n"
regex hw_dbg "^([[:print:]]*): Reset polling failed to complete\\.$"
message[defensive]: hw_dbg "RAR index %d is out of range.\n"
regex hw_dbg "^([[:print:]]*): RAR index ([-]\?[0-9]{1,}) is out of range\\.$"
message[defensive]: hw_dbg "RAR index %d is out of range.\n"
regex hw_dbg "^([[:print:]]*): RAR index ([-]\?[0-9]{1,}) is out of range\\.$"
message[defensive]: hw_dbg "No space in VLVF.\n"
regex hw_dbg "^([[:print:]]*): No space in VLVF\\.$"
message[defensive]: hw_dbg "Flow Director previous command isn't complete, aborting table re-initialization. \n"
regex hw_dbg "^([[:print:]]*): Flow Director previous command isn't complete, aborting table re-initialization\\. $"
message[defensive]: hw_dbg "Flow Director Signature poll time exceeded!\n"
regex hw_dbg "^([[:print:]]*): Flow Director Signature poll time exceeded!$"
message[defensive]: hw_dbg "Flow Director Perfect poll time exceeded!\n"
regex hw_dbg "^([[:print:]]*): Flow Director Perfect poll time exceeded!$"
message[defensive]: hw_dbg "Error on l4type input\n"
regex hw_dbg "^([[:print:]]*): Error on l4type input$"
message[defensive]: hw_dbg "Rx unit being enabled before security path fully disabled.  Continuing with init.\n"
regex hw_dbg "^([[:print:]]*): Rx unit being enabled before security path fully disabled\\.  Continuing with init\\.$"

file: "drivers/net/ixgbe/ ixgbe_common.c"

message[defensive]: hw_dbg "NVM Read Error\n"
regex hw_dbg "^([[:print:]]*): NVM Read Error$"
message[defensive]: hw_dbg "PCI-E Master disable polling has failed.\n"
regex hw_dbg "^([[:print:]]*): PCI-E Master disable polling has failed\\.$"
message[defensive]: hw_dbg "Eeprom read timed out\n"
regex hw_dbg "^([[:print:]]*): Eeprom read timed out$"
message[defensive]: hw_dbg "Could not acquire EEPROM grant\n"
regex hw_dbg "^([[:print:]]*): Could not acquire EEPROM grant$"
message[defensive]: hw_dbg "SPI EEPROM Status error\n"
regex hw_dbg "^([[:print:]]*): SPI EEPROM Status error$"
message[defensive]: hw_dbg "EEPROM read failed\n"
regex hw_dbg "^([[:print:]]*): EEPROM read failed$"
message[defensive]: hw_dbg "RAR index %d is out of range.\n"
regex hw_dbg "^([[:print:]]*): RAR index ([-]\?[0-9]{1,}) is out of range\\.$"
message[defensive]: hw_dbg "Overriding MAC Address in RAR[0]\n"
regex hw_dbg "^([[:print:]]*): Overriding MAC Address in RAR\\[0]$"
message[defensive]: hw_dbg "Clearing RAR[1-%d]\n"
regex hw_dbg "^([[:print:]]*): Clearing RAR\\[1-([-]\?[0-9]{1,})]$"
message[defensive]: hw_dbg "Added a secondary address to RAR[%d]\n"
regex hw_dbg "^([[:print:]]*): Added a secondary address to RAR\\[([-]\?[0-9]{1,})]$"
message[defensive]: hw_dbg "ixgbe_add_uc_addr Complete\n"
regex hw_dbg "^([[:print:]]*): ixgbe_add_uc_addr Complete$"
message[defensive]: hw_dbg "Clearing RAR[1-%d]\n"
regex hw_dbg "^([[:print:]]*): Clearing RAR\\[1-([-]\?[0-9]{1,})]$"
message[defensive]: hw_dbg "ixgbe_update_uc_addr_list_generic Complete\n"
regex hw_dbg "^([[:print:]]*): ixgbe_update_uc_addr_list_generic Complete$"
message[defensive]: hw_dbg "MC filter type param set incorrectly\n"
regex hw_dbg "^([[:print:]]*): MC filter type param set incorrectly$"
message[defensive]: hw_dbg "ixgbe_update_mc_addr_list_generic Complete\n"
regex hw_dbg "^([[:print:]]*): ixgbe_update_mc_addr_list_generic Complete$"
message[defensive]: hw_dbg "Flow control param set incorrectly\n"
regex hw_dbg "^([[:print:]]*): Flow control param set incorrectly$"
message[defensive]: hw_dbg "Invalid packet buffer number [%d], expected range is 0-7\n"
regex hw_dbg "^([[:print:]]*): Invalid packet buffer number \\[([-]\?[0-9]{1,})], expected range is 0-7$"
message[defensive]: hw_dbg "Invalid water mark configuration\n"
regex hw_dbg "^([[:print:]]*): Invalid water mark configuration$"
message[defensive]: hw_dbg "ixgbe_fc_rx_pause not valid in strict IEEE mode\n"
regex hw_dbg "^([[:print:]]*): ixgbe_fc_rx_pause not valid in strict IEEE mode$"
message[defensive]: hw_dbg "Driver can't access resource, GSSR timeout.\n"
regex hw_dbg "^([[:print:]]*): Driver can't access resource, GSSR timeout\\.$"

file: "drivers/net/ixgbe/ixgbe_phy.c"

message[defensive]: hw_dbg "PHY address command did not complete.\n"
regex hw_dbg "^([[:print:]]*): PHY address command did not complete\\.$"
message[defensive]: hw_dbg "PHY read command didn't complete\n"
regex hw_dbg "^([[:print:]]*): PHY read command didn't complete$"
message[defensive]: hw_dbg "PHY address cmd didn't complete\n"
regex hw_dbg "^([[:print:]]*): PHY address cmd didn't complete$"
message[defensive]: hw_dbg "PHY address cmd didn't complete\n"
regex hw_dbg "^([[:print:]]*): PHY address cmd didn't complete$"
message[defensive]: hw_dbg "PHY reset did not complete.\n"
regex hw_dbg "^([[:print:]]*): PHY reset did not complete\\.$"
message[defensive]: hw_dbg "Bad control value\n"
regex hw_dbg "^([[:print:]]*): Bad control value$"
message[defensive]: hw_dbg "Bad control type\n"
regex hw_dbg "^([[:print:]]*): Bad control type$"
message[defensive]: hw_dbg "SFP+ module not supported\n"
regex hw_dbg "^([[:print:]]*): SFP\\+ module not supported$"
message[defensive]: hw_dbg "SFP+ module not supported\n"
regex hw_dbg "^([[:print:]]*): SFP\\+ module not supported$"
message[defensive]: hw_dbg "No matching SFP+ module found\n"
regex hw_dbg "^([[:print:]]*): No matching SFP\\+ module found$"
message[defensive]: hw_dbg "I2C byte read error - Retrying.\n"
regex hw_dbg "^([[:print:]]*): I2C byte read error - Retrying\\.$"
message[defensive]: hw_dbg "I2C byte read error.\n"
regex hw_dbg "^([[:print:]]*): I2C byte read error\\.$"
message[defensive]: hw_dbg "I2C byte write error - Retrying.\n"
regex hw_dbg "^([[:print:]]*): I2C byte write error - Retrying\\.$"
message[defensive]: hw_dbg "I2C byte write error.\n"
regex hw_dbg "^([[:print:]]*): I2C byte write error\\.$"
message[defensive]: hw_dbg "I2C ack was not received.\n"
regex hw_dbg "^([[:print:]]*): I2C ack was not received\\.$"
message[defensive]: hw_dbg "I2C data was not set to %X\n"
regex hw_dbg "^([[:print:]]*): I2C data was not set to ([0-9A-F]{1,})$"
message[defensive]: hw_dbg "Error - I2C data was not set to %X.\n"
regex hw_dbg "^([[:print:]]*): Error - I2C data was not set to ([0-9A-F]{1,})\\.$"
